import os
import uuid
import shutil
import logging
import asyncio
import subprocess
from typing import Optional
import numpy as np
from PIL import Image, UnidentifiedImageError
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ seam_carving –¥–æ—Å—Ç—É–ø–µ–Ω
import seam_carving

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TOKEN")
DISTORT_PERCENT = float(os.getenv("DISTORT_PERCENT", 36))
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 –ú–ë
MAX_CONCURRENT_TASKS = 5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
SEMAPHORE = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs("raw", exist_ok=True)
os.makedirs("result", exist_ok=True)

def check_ffmpeg() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        subprocess.run(["ffmpeg", "-version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logger.info("ffmpeg —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        logger.error("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", e)
        raise EnvironmentError("ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ GIF.")

async def process_image(src_path: str, dest_path: str, distort_percent: float) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é seam carving.

    Args:
        src_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
        dest_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        distort_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤.

    Returns:
        bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    try:
        with Image.open(src_path) as img:
            src = np.array(img.convert("RGB"))
        src_h, src_w, _ = src.shape
        if src_h > 5000 or src_w > 5000:
            logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: %dx%d", src_w, src_h)
            return False

        dst = await asyncio.wait_for(
            asyncio.get_event_loop().run_in_executor(
                None,
                lambda: seam_carving.resize(
                    src,
                    (int(src_w * (1 - distort_percent / 100)), int(src_h * (1 - distort_percent / 100))),
                    energy_mode='backward',
                    order='width-first',
                    keep_mask=None
                )
            ),
            timeout=30.0
        )
        Image.fromarray(dst).save(dest_path)
        return True
    except UnidentifiedImageError as e:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ %s: %s", src_path, e)
        return False
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è %s", src_path)
        return False
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è %s: %s", src_path, e)
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ GIF.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /distort <–ø—Ä–æ—Ü–µ–Ω—Ç> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è (0-50%).\n"
        "–ü—Ä–∏–º–µ—Ä: /distort 20"
    )

async def set_distort_percent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /distort."""
    global DISTORT_PERCENT
    try:
        percent = float(context.args[0])
        if 0 <= percent <= 50:
            DISTORT_PERCENT = percent
            await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è: {percent}%")
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è: %s%%", percent)
        else:
            await update.message.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 50.")
    except (IndexError, ValueError):
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /distort 20")

async def distort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–∏–º–µ–Ω—è—è seam carving."""
    async with SEMAPHORE:
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ‚Ä¶")
        photo_file = await update.message.photo[-1].get_file()
        if photo_file.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë).")
            return

        filename = f"{uuid.uuid4().hex}.jpg"
        raw_path = f"./raw/{filename}"
        result_path = f"./result/{filename}"

        try:
            await photo_file.download_to_drive(raw_path)
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, —Ä–∞–∑–º–µ—Ä: %s", update.effective_user.id, photo_file.file_size)

            if await process_image(raw_path, result_path, DISTORT_PERCENT):
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(result_path, 'rb'))
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ :(")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: %s", e)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ :(")
        finally:
            for path in (raw_path, result_path):
                if os.path.exists(path):
                    os.remove(path)

async def distort_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–∫–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω—è—è seam carving."""
    async with SEMAPHORE:
        sticker = update.message.sticker
        if sticker.is_animated or sticker.is_video:
            await update.message.reply_text("–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è üò¢")
            return

        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∏–∫–µ—Ä‚Ä¶")
        file = await context.bot.get_file(sticker.file_id)
        if file.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë).")
            return

        filename = f"{uuid.uuid4().hex}.png"
        raw_path = f"./raw/{filename}"
        result_path = f"./result/{filename}"

        try:
            await file.download_to_drive(raw_path)
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, —Ä–∞–∑–º–µ—Ä: %s", update.effective_user.id, file.file_size)

            if await process_image(raw_path, result_path, DISTORT_PERCENT):
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(result_path, 'rb'))
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ :(")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: %s", e)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ :(")
        finally:
            for path in (raw_path, result_path):
                if os.path.exists(path):
                    os.remove(path)

async def distort_gif(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GIF, –ø—Ä–∏–º–µ–Ω—è—è seam carving –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–¥—Ä—É."""
    async with SEMAPHORE:
        file = await context.bot.get_file(update.message.animation.file_id if update.message.animation else update.message.document.file_id)
        if file.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë).")
            return

        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é GIF‚Ä¶")
        uid = uuid.uuid4().hex
        raw_gif = f"./raw/{uid}.gif"
        frames_dir = f"./raw/{uid}_frames"
        result_gif = f"./result/{uid}_distorted.gif"
        os.makedirs(frames_dir, exist_ok=True)

        try:
            await file.download_to_drive(raw_gif)
            logger.info("–ü–æ–ª—É—á–µ–Ω GIF –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, —Ä–∞–∑–º–µ—Ä: %s", update.effective_user.id, file.file_size)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
            await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: subprocess.run(
                    ["ffmpeg", "-i", raw_gif, f"{frames_dir}/frame_%04d.png"],
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤
            frame_paths = [os.path.join(frames_dir, name) for name in sorted(os.listdir(frames_dir))]
            total_frames = len(frame_paths)
            halfway_point = total_frames // 2

            for i, frame_path in enumerate(frame_paths, 1):
                if not await process_image(frame_path, frame_path, DISTORT_PERCENT):
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞ {frame_path}")
                if i == halfway_point:
                    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 50%")

            # –°–±–æ—Ä–∫–∞ GIF
            await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: subprocess.run(
                    [
                        "ffmpeg", "-y", "-framerate", "10", "-i", f"{frames_dir}/frame_%04d.png",
                        "-vf", "scale=trunc(iw/2)*2:trunc(ih/2)*2",
                        "-loop", "0", result_gif
                    ],
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
            )

            await context.bot.send_animation(chat_id=update.effective_chat.id, animation=open(result_gif, "rb"))
        except subprocess.CalledProcessError as e:
            logger.error("–û—à–∏–±–∫–∞ ffmpeg –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF: %s", e)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF :(")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GIF: %s", e)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF :(")
        finally:
            shutil.rmtree(frames_dir, ignore_errors=True)
            for path in (raw_gif, result_gif):
                if os.path.exists(path):
                    os.remove(path)

if __name__ == "__main__":
    check_ffmpeg()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("distort", set_distort_percent))
    app.add_handler(MessageHandler(filters.PHOTO, distort))
    app.add_handler(MessageHandler(filters.Sticker.ALL, distort_sticker))
    app.add_handler(MessageHandler(filters.ANIMATION, distort_gif))
    app.run_polling()
